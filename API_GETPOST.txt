 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //http://jsonplaceholder.typicode.com
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void apiGet()
    {
        /**
         * @baseUrl Retrofit 인스터스를 생성
         * @addConverterFactory 객체와 JSON의 변환을 자동으로 하도록 설정
         */
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(RetrofitService.API_url)
                .addConverterFactory(GsonConverterFactory.create())
                .build();


        //API Interface 생성
        RetrofitService retrofitService = retrofit.create(RetrofitService.class);
        Call<List<RetrofitRepo>> call = retrofitService.getSecond("1"); //userid 1 ~ .... / 각 useId 별 10개의 데이터
        // 앞서만든 요청을 수행
        call.enqueue(new Callback<List<RetrofitRepo>>() {
            @Override
            // 성공시
            public void onResponse(Call<List<RetrofitRepo>> call, Response<List<RetrofitRepo>> response) {
                Log.v("Test_retrofit","Success to Response");
                List<RetrofitRepo> contributors = response.body(); // 통신후 데이터 body를 RetrofitRepo 타입의 List객체에 담아 미리선언되어있는 메소드로 부터 얻을수 있다.
                Log.v("Test_retrofit",response.body().toString());
                Log.v("Test_retrofit",response.toString());
                mainActivity.gettextview().setText((response.toString()));
                // 받아온 리스트를 순회하면서
                for (RetrofitRepo contributor : contributors) {
                    // 카테고리 userID , id , body , title
                    // 텍스트 뷰에 id 카테고리 정보를 붙임
                    mainActivity.gettextview().append(contributor.getbody()+"\n");
                    Log.v("Test_retrofit",contributor.getid());
                }
            }
            @Override
            // 실패시
            public void onFailure(Call<List<RetrofitRepo>> call, Throwable t) {
                Log.v("Test","Fail to Response");
            }
        });
    }
    public void apiPost()
    {
        /**
         * @baseUrl Retrofit 인스터스를 생성
         * @addConverterFactory 객체와 JSON의 변환을 자동으로 하도록 설정
         */
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(RetrofitService.API_url)
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        HashMap<String, Object> input = new HashMap<>();
        input.put("1","1");
        //API Interface 생성
        RetrofitService retrofitService = retrofit.create(RetrofitService.class);
        Call<RetrofitRepo> call = retrofitService.postFirst(input);
        // 앞서만든 요청을 수행
        call.enqueue(new Callback<RetrofitRepo>() {
            @Override
            // 성공시
            public void onResponse(Call<RetrofitRepo> call, Response<RetrofitRepo> response) {
                Log.v("Test_retrofit","Success to Response");
                RetrofitRepo contributors = response.body(); // 통신후 데이터 body를 RetrofitRepo 타입의 List객체에 담아 미리선언되어있는 메소드로 부터 얻을수 있다.
                Log.v("Test_retrofit",response.body().toString());
                Log.v("Test_retrofit",response.toString());
                mainActivity.gettextview().setText((response.toString()));
                // 받아온 리스트를 순회하면서
                //         for (RetrofitRepo contributor : contributors) {
                // 카테고리 userID , id , body , title
                // 텍스트 뷰에 id 카테고리 정보를 붙임
                mainActivity.gettextview().append(contributors.getbody()+"\n");
                Log.v("Test_retrofit",contributors.getid());

                //          }
            }
            @Override
            // 실패시
            public void onFailure(Call<RetrofitRepo> call, Throwable t) {
                Log.v("Test","Fail to Response");
            }
        });
    }